type User = 
 record {
   bio: text;
   location: text;
   postsCount: nat;
   "principal": principal;
   tokenBalance: nat;
   totalRewards: nat;
   username: text;
   website: text;
 };
type Post = 
 record {
   author: principal;
   content: text;
   id: nat;
   likes: nat;
   mediaUrl: text;
   rewards: nat;
   timestamp: int;
 };
type NFT = 
 record {
   id: nat;
   metadata: text;
   owner: principal;
   timestamp: int;
 };
type Comment = 
 record {
   author: principal;
   content: text;
   id: nat;
   postId: nat;
   timestamp: int;
 };
service : {
  addComment: (postId: nat, content: text) -> (nat);
  createNFT: (metadata: text) -> (nat);
  createPost: (content: text, mediaUrl: text) -> (nat);
  followUser: (userToFollow: principal) -> (bool);
  getCommentCount: () -> (nat) query;
  getComments: (postId: nat) -> (vec Comment) query;
  getFollowers: (userPrincipal: principal) -> (vec principal) query;
  getFollowing: (userPrincipal: principal) -> (vec principal) query;
  getMyProfile: () -> (opt User);
  getNFTCount: () -> (nat) query;
  getPostCount: () -> (nat) query;
  getPosts: () -> (vec Post) query;
  getTrendingHashtags: () -> (vec text) query;
  getUserCount: () -> (nat) query;
  getUserNFTs: (userPrincipal: principal) -> (vec NFT) query;
  getUserProfile: (userPrincipal: principal) -> (opt User) query;
  likePost: (postId: nat) -> (bool);
  transferTokens: (to: principal, amount: nat) -> (bool);
  updateProfile: (username: text, bio: text, location: text, website:
   text) -> (bool);
}
